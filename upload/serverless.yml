service: upload
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: "Allow"
          Resource: "*"
          Action:
            - 's3:*'
            - rekognition:DetectText
            - lambda:InvokeFunction
            - lambda:InvokeAsync
        - Effect: "Allow"
          Action:
            - 'dynamodb:*'
          Resource: '*'

# some variables
some:
  s3:
    bucket: leaf3bbilguunbucket

files:
  createApproachUrl: handlers/createApproachUrl.handler
  handleImagesUrl: handlers/handleImagesUrls.handler
  lastImage: handlers/lastImage.handler
  send: handlers/send.handler
  signup: handlers/signup.handler

# --

resources:
  Resources:
    # remove api gateway cors error section
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    # ----
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:some.s3.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - GET
                - DELETE
                - POST
              AllowedOrigins:
                - '*'
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - arn:aws:s3:::${self:some.s3.bucket}/*
                - arn:aws:s3:::${self:some.s3.bucket}
              Effect: Allow
              Principal: '*'



# some functions
functions:
  createApproachUrl:
    handler: ${self:files.createApproachUrl}
    events:
      - http:
          path: url
          method: post
          cors: true
  handleUrls:
    handler: ${self:files.handleImagesUrl}
    events:
      - http: 
          path: handle
          method: get
          cors: true
  lastImage:
    handler: ${self:files.lastImage}
    events:
      - s3:
          bucket: ${self:some.s3.bucket}
          event: s3:ObjectCreated:*
          existing: true
  signup:
    handler: ${self:files.signup}
    events:
      - http:
          path: signup
          method: post
          cors: true
  # send: 
  #   handler: ${self:files.send}
